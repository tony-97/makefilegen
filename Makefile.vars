# Disable make builtin rules and variables
# https://stackoverflow.com/a/71184668
MAKEFLAGS += rR
$(foreach x,$(filter-out .% MAKE% SHELL CURDIR,$(.VARIABLES)) MAKEINFO,$(if $(filter default,$(origin $x)),$(eval override undefine $x)))

export BUILD_NAME  = build$(addprefix _,$(call to_lower,$(TARGET)))
export BUILD_DIR   = $(BUILD_NAME)

export QUOTED = $$(addprefix ",$$(addsuffix ",$$1))

#==============================================================================
# Converts ascii string to lower
#==============================================================================
# $(1) : string to convert
export to_lower = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))

#==============================================================================
# Compares if matches the compiler
#==============================================================================
# $(1) : compiler to compare
# $(2) : compiler
COMPILER_NAME = $(findstring $(1),$(basename $(notdir $(2))))

#==============================================================================
# Check if its a compiler toolchain
#==============================================================================
# $(1) : c   compiler
# $(2) : c++ compiler
CHECK_COMPILER = $(filter $(1) $(2),$(call COMPILER_NAME,$(1),$(CC)) $(call COMPILER_NAME,$(2),$(CXX)))

define DEFINE_COMPILER
ifneq ($(call CHECK_COMPILER,$(1),$(2)),)
    ifndef CLANG
        export $(3) := 1
        ifneq ($(call COMPILER_NAME,$(2),$(CXX)),)
            export LD ?= $(CXX)
        else
            export LD ?= $(CC)
        endif
    endif
endif
endef

ifeq ($(TARGET),WEB)
    export CC  := emcc
    export CXX := em++
    export AR  := emar
endif

$(eval $(call DEFINE_COMPILER,clang,clang++,CLANG))
$(eval $(call DEFINE_COMPILER,gcc,g++,GCC))
$(eval $(call DEFINE_COMPILER,emcc,em++,EMSCRIPTEN))
$(eval $(call DEFINE_COMPILER,cl,cl,MSVC))

ifeq ($(OS),Windows_NT)
    export PLATFORM_HOST_WINDOWS := 1
else
    export PLATFORM_HOST_UNIX := 1
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
        export PLATFORM_HOST_LINUX := 1
    endif
    ifeq ($(UNAME_S),Darwin)
        export PLATFORM_HOST_DARWIN := 1
    endif
endif # detect more host platforms

ifdef PLATFORM_HOST_WINDOWS
    export MKDIR  = if not exist $$(call QUOTED,$$1) mkdir $$(call QUOTED,$$1)
    export REMOVE = rmdir /s /q $$(call QUOTED,$$1)
else
    export MKDIR  = mkdir -p $$1
    export REMOVE = rm -fR $$1
endif

#==============================================================================
# MK_DEPS_IMPL
#==============================================================================
# $(1) : Compiler
# $(2) : Source to get its deps C/C++
# $(3) : Target to generate
# $(4) : Deps to output
# $(5) : Compiler preprocessor flags
# $(6) : Compiler flags
#==============================================================================
# MK_LIB
#==============================================================================
# $(1) : AR
# $(2) : ARFLAGS
# $(3) : Lib name
# $(4) : OBJS
#==============================================================================
# COMPILE_ONLY
#==============================================================================
# $(1) : Compiler
# $(2) : Source to compile C/C++
# $(3) : Object to output
# $(4) : Compiler preprocessor flags
# $(5) : Compiler flags
#==============================================================================
# LINK_EXEC
#==============================================================================
# $(1) : LD
# $(2) : EXEC_NAME
# $(3) : OBJS
# $(4) : LDLIBS
# $(5) : LDFLAGS
ifdef MSVC
    export MK_INCLUDES = $$(addprefix /I ,$$(call QUOTED,$$(INCLUDE_DIRS)))
    export MK_DEFINES = $$(addprefix /D,$$(DEFINES))
    export MK_LIBS_PATH = $$(addprefix /LIBPATH:,$$(call QUOTED,$$(LIBS_PATH)))
    export MK_DEPS_IMPL = $(info [INFO] dependency generation for MSVC not implemented yet)
    export MK_LIB = $$1 $$2 $$4 /OUT:$$3 
    export COMPILE_ONLY_IMPL = $$1 /c $$2 /Fo: $$3 $$4 $$5
    export LINK_EXEC = $$1 $$3 /Fe: $$2 $$4 $$5
    export ARFLAGS ?=
    export WFLAGS := /Wall
else
    export MK_INCLUDES = $$(addprefix -I ,$$(INCLUDE_DIRS))
    export MK_DEFINES = $$(addprefix -D,$$(DEFINES))
    export MK_LIBS_PATH = $$(addprefix -L ,$$(LIBS_PATH))
    export MK_DEPS_IMPL = $$1 $$2 -E -MMD -MP -MT $$3 -MF $$4 -o $$(ROOT_PATH)/dummy.i $$5 $$6
    export MK_LIB = $$1 $$2 $$3 $$4
    export COMPILE_ONLY_IMPL = $$1 -c $$2 -o $$3 $$4 $$5
    export LINK_EXEC = $$1 -o $$2 $$3 $$4 $$5
    export AR ?= ar
    export ARFLAGS ?= rcs
    export WFLAGS := -W -Wall -Wextra -Wpedantic -pedantic -Wshadow -Weffc++
endif
