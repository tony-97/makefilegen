# Flags to pass to the C compiler
CFLAGS += $(WFLAGS)

# Flags to pass to the C++ compiler
CXXFLAGS += $(WFLAGS)

# Proprocessor flags
CPPFLAGS += $(MK_INCLUDES) $(MK_DEFINES)

# Libraries paths
LDFLAGS += $(MK_LIBS_PATH)

# sources to include
EXTRA_SRCS_CXX ?=
EXTRA_SRCS_C ?=

# sources to exclude
EXCLUDE_SRCS ?=

#==============================================================================
# Compile only macro
#==============================================================================
# $(1) : Object to output
# $(2) : Source to compile C/C++
# $(3) : Compiler
# $(4) : Compiler preprocessor flags
# $(5) : Compiler flags
define COMPILE_ONLY
$(1) : $(2)
	$(call COMPILE_ONLY_IMPL,$(3),$(2),$(1),$(4),$(5))
endef

#==============================================================================
# Create directory
#==============================================================================
# $(1) : Directory to be create
define CREATE_DIR
$(1) :
	$(call MKDIR,$(1))
endef

#==============================================================================
# Generate deps
#==============================================================================
# $(1) : Deps to output
# $(2) : Source to get its deps C/C++
# $(3) : Target to generate
# $(4) : Compiler
# $(5) : Compiler preprocessor flags
# $(6) : Compiler flags
define MK_DEPS
$(1) : $(2)
	$(call MK_DEPS_IMPL,$(4),$(2),$(3),$(1),$(5),$(6))
endef

#==============================================================================
# Changes $(SRC_DIR) path to $(OBJ_DIR)
#==============================================================================
# $(1) : Source file with full path
define SOURCE_PATH_2_OBJ
$(patsubst $(SRC_DIR)%,$(OBJ_DIR)%,$(1))
endef

#==============================================================================
# Replace $(SRC_DIR) path to $(DEP_DIR)
#==============================================================================
# $(1) : Source file with full path
define SOURCE_PATH_2_DEP
$(patsubst $(SRC_DIR)%,$(DEP_DIR)%,$(1))
endef

#==============================================================================
# Replaces srcs file extension with .c.o .cc.o 
#==============================================================================
# $(1) : Full source filename
define CXXSOURCES_2_OBJS
$(call SOURCE_PATH_2_OBJ,\
$(subst .cpp,.cc.o,$(subst .cxx,.cc.o,$(subst .cc,.cc.o,$(1)))))
endef
define CSOURCES_2_OBJS
$(call SOURCE_PATH_2_OBJ,$(subst .c,.c.o,$(1)))
endef

#==============================================================================
# Replaces srcs file extension with .d 
#==============================================================================
# $(1) : Full source filename
define CXXSOURCES_2_DEPS
$(call SOURCE_PATH_2_DEP,\
$(subst .cpp,.cc.d,$(subst .cxx,.cc.d,$(subst .cc,.cc.d,$(1)))))
endef
define CSOURCES_2_DEPS
$(call SOURCE_PATH_2_DEP,$(subst .c,.c.d,$(1)))
endef

#==============================================================================
# Find sources files in a folder with the given pattern
#==============================================================================
# $(1) : Paths for search sources
# $(2) : Paterns to search
# old implementation
# $(shell find $(1) -type f -iname $(2))
FIND = $(foreach d,$(wildcard $(1:=/*)),$(call FIND,$d,$2) $(filter $(subst *,%,$2),$d))

# The path where to put the executable and the library
BUILD_PATH ?= .

# Name for the library
LIB_NAME ?= mylib

# Name of the executable
EXEC_NAME ?= app

# Name of the sources directory
SRC_DIR ?= src

# Name of the objects directory
OBJ_DIR ?= obj

# Name of the root build directory
ROOT_PATH ?= $(BUILD_PATH)

# Name of the deps directory
DEP_DIR ?= $(ROOT_PATH)/deps

# Sources to compile
SRCS_CXX := $(filter-out $(EXCLUDE_SRCS),$(call FIND,$(SRC_DIR),*.cpp *.cc *.cxx)) $(EXTRA_SRCS_CXX)
SRCS_C   := $(filter-out $(EXCLUDE_SRCS),$(call FIND,$(SRC_DIR),*.c)) $(EXTRA_SRCS_C)

# Sources converted to object file
OBJS_CXX := $(call CXXSOURCES_2_OBJS,$(SRCS_CXX))
OBJS_C   := $(call CSOURCES_2_OBJS,$(SRCS_C))
OBJS     := $(OBJS_CXX) $(OBJS_C)

# Sources converted to deps
DEPS := $(call CXXSOURCES_2_DEPS,$(SRCS_CXX)) $(call CSOURCES_2_DEPS,$(SRCS_C))

# Sources directorie tree
# old implementation
# SRCS_DIRS := $(shell find $(SRC_DIR)/ -type d)
#SRCS_DIRS := $(sort $(dir $(call FIND,$(SRC_DIR),*.cpp *.hpp *.cc *.hh *.cxx *.c *.h)))
SRCS_DIRS := $(sort $(dir $(call FIND,$(SRC_DIR),*.cpp *.cc *.cxx *.c)))

# Objects directories with the same structure as src dir
OBJS_DIRS := $(call SOURCE_PATH_2_OBJ,$(SRCS_DIRS))

# Deps directories with the same structure as src dir
DEPS_DIRS := $(call SOURCE_PATH_2_DEP,$(SRCS_DIRS))

.PHONY: clean cleanall info

$(BUILD_PATH):
	$(call MKDIR,$(BUILD_PATH))

all: $(BUILD_PATH)/$(EXEC_NAME)

lib: $(BUILD_PATH)/lib$(LIB_NAME).a

$(OBJS): | $(BUILD_PATH) $(OBJS_DIRS)
$(DEPS): | $(BUILD_PATH) $(DEPS_DIRS)

$(BUILD_PATH)/$(EXEC_NAME): $(OBJS) $(DEPS)
	$(call LINK_EXEC,$(LD),$@,$(OBJS),$(LDLIBS),$(LDFLAGS))

$(BUILD_PATH)/lib$(LIB_NAME).a: $(OBJS) $(DEPS)
	$(call MK_LIB,$(AR),$(ARFLAGS),$@,$(OBJS))

$(foreach O_DIR,$(OBJS_DIRS),$(eval $(call CREATE_DIR,$(O_DIR))))
$(foreach D_DIR,$(DEPS_DIRS),$(eval $(call CREATE_DIR,$(D_DIR))))

$(foreach CXX_FILE,$(SRCS_CXX),\
$(eval \
$(call COMPILE_ONLY,$(call CXXSOURCES_2_OBJS,$(CXX_FILE)),\
$(CXX_FILE),$(CXX),$(CPPFLAGS),$(CXXFLAGS))))

$(foreach C_FILE,$(SRCS_C),\
$(eval \
$(call COMPILE_ONLY,$(call CSOURCES_2_OBJS,$(C_FILE)),\
$(C_FILE),$(CC),$(CPPFLAGS),$(CFLAGS))))

-include $(DEPS)

$(foreach CXX_FILE,$(SRCS_CXX),\
$(eval \
$(call MK_DEPS,$(call CXXSOURCES_2_DEPS,$(CXX_FILE)),\
$(CXX_FILE),$(call CXXSOURCES_2_OBJS,$(CXX_FILE)),$(CXX),$(CPPFLAGS),$(CXXFLAGS))))

$(foreach C_FILE,$(SRCS_C),\
$(eval \
$(call MK_DEPS,$(call CSOURCES_2_DEPS,$(C_FILE)),\
$(C_FILE),$(call CSOURCES_2_OBJS,$(C_FILE)),$(CC),$(CPPFLAGS),$(CFLAGS))))

info:
	$(info [INFO] AR: $(AR))
	$(info [INFO] ARFLAGS: $(ARFLAGS))
	$(info [INFO] C compiler: $(CC))
	$(info [INFO] C++ compiler: $(CXX))
	$(info [INFO] linker: $(LD))
	$(info [INFO] C++ flags: $(CXXFLAGS))
	$(info [INFO] C flags: $(CFLAGS))
	$(info [INFO] preprocessor flags: $(CPPFLAGS))
	$(info [INFO] libraries flags: $(LDFLAGS))
	$(info [INFO] libraries: $(LDLIBS))
	$(info [INFO] C++ Source files: $(SRCS_CXX))
	$(info [INFO] C Source files: $(SRCS_C))
	$(info [INFO] Objects to create: $(OBJS))
	$(info [INFO] Deps to create: $(DEPS))
	$(info [INFO] Source directory tree: $(SRCS_DIRS))
	$(info [INFO] Object directory tree to create: $(OBJS_DIRS))
	$(info [INFO] Deps directory tree to create: $(DEPS_DIRS))

clean:
	$(call REMOVE,$(OBJS_DIRS))

cleanall: clean
	$(call REMOVE,$(BUILD_PATH)/$(EXEC_NAME))
	$(call REMOVE,$(DEPS_DIRS))
